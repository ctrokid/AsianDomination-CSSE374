# Config Properties File UML example.

# path leading up to src folder example: C:\\Users\\trowbrct\\Desktop\\CSSE374\\Labs\\Week 1\\1-3\\Lab1-3\\src
input-folder=C:\\Users\\trowbrct\\Desktop\\CSSE374\\Labs\\Solutions\\Lab7-2-Solution\\test

# package names example: api,impl,utils,detection.strategy,detection.impl
# NOTE: you must specify every desired package. A blank value here will generate no classes.
input-packages=-

# example: java.io.Reader,java.io.Bufferedreader
# java.awt.Container,java.awt.Button,javax.swing.JButton,javax.swing.JComponent,javax.swing.AbstractButton
input-classes=java.awt.Container,java.awt.Button,javax.swing.JButton,javax.swing.JComponent,javax.swing.AbstractButton

# output directory example: Lab2-1\\input_output
output-dir=input_output\\Milestone6SwingAwtComposite

# path to dot executable
dot-path=C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe

# sequential list of phases to be ran. Examples:
# UML-Class-Loading : loads classes from input-folder and input-classes config values.
# Decorator-Detection : will search through classes and detect if decorator pattern appears.
# Singleton-Detection-Visitor : will search through classes using visitor pattern and detect if singleton pattern appears.
# Singleton-Detection : will search through classes using brute force and detect if singleton pattern appears.
# Adapter-Detection : will search through classes and detect if adapter pattern appears.
# Composite-Detection : will search through classes and detect if composite pattern appears.
# Dot-Generation : this phase will write the dot file to the specified output-dir config value.
phases=UML-Class-Loading,Composite-Detection,Singleton-Detection-Visitor,Adapter-Detection,Decorator-Detection,Singleton-Detection,DOT-Generation

# other config values??
#composite-require-addAndRemoveMethodsOneParameter=false
#adapter-method-delegation=2
#decorator-method-delegation=1
#singleton-require-getInstance=false